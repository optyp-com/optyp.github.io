---
import "../styles/ai-analyzer.css";
---

<section class="ai-container">
  <h2 class="title">Optimize Smarter with AI</h2>
  <p class="subtitle">
    Instantly get your <strong>ATS Resume Score</strong> and <strong>LinkedIn Profile Rating</strong> powered by Google Gemini ‚Äî free, fast, and accurate.
  </p>

  <div class="ai-grid">
    <div class="glass-card hover-card">
      <h3 class="card-title">üìÑ ATS Resume Score</h3>
      <form id="resume-form" class="form">
        <input
          type="file"
          id="resume-upload"
          accept=".pdf,.doc,.docx,.txt"
          class="input-file"
        />
        <textarea
          id="job-description"
          placeholder="Paste Job Description (optional)"
          class="input-area"
          rows="4"
        ></textarea>
        <button type="submit" class="btn-primary">Analyze Resume</button>
      </form>

      <div id="resume-status" class="status-msg"></div>
      <div id="resume-result" class="result-box"></div>
    </div>

    <div class="glass-card hover-card">
       <h3 class="card-title">üíº LinkedIn Profile Score</h3>
      <form id="linkedin-form" class="form">
        <textarea
          id="linkedin-text"
          placeholder="Paste your LinkedIn profile text here (headline, about, experience, skills, etc.)"
          class="input-area"
          rows="8"
        ></textarea>
        <p class="helper-text">üí° Tip: Copy all text from your LinkedIn profile and paste here</p>
        <button type="submit" class="btn-secondary">Analyze Profile</button>
      </form>

      <div id="linkedin-status" class="status-msg"></div>
      <div id="linkedin-result" class="result-box"></div>
    </div>
  </div>
</section>

<script>
  // === üåÄ LOADING SPINNER ===
  function showLoading(targetId) {
    const container = document.getElementById(targetId);
    container.innerHTML = `
      <div class="loading-spinner">
        <div class="spinner-circle"></div>
        <div class="loading-text">Analyzing with AI<span class="dots"></span></div>
      </div>
    `;
  }

  // === üß† EXTRACT SCORE ===
  function extractScore(text) {
    const patterns = [
      /(?:overall\s+)?score[:\s]*(\d{1,3})\s*(?:\/|out of)?\s*100/i,
      /(\d{1,3})\s*\/\s*100/i,
      /score[:\s]*(\d{1,3})(?!\d)/i,
      /rating[:\s]*(\d{1,3})\s*(?:\/|out of)?\s*100/i
    ];
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        const score = parseInt(match[1]);
        return Math.min(Math.max(score, 0), 100);
      }
    }
    return null;
  }

  // === ‚ú® EXTRACT RECOMMENDATIONS ===
  function extractRecommendations(text) {
    const sectionRegex = /(recommendations?|suggestions?|tips?|improvements?|actionable)[:\s]*([\s\S]*?)(?=\n\n|$)/i;
    const match = text.match(sectionRegex);
    if (!match) return null;

    const recommendationsText = match[2]
      .split(/\n/)
      .map(line => line.replace(/^[\d\.\-\*‚Ä¢]+\s*/, '').trim())
      .filter(line => line.length > 10 && !line.match(/^(#{1,6}|\*{2})/));
    return recommendationsText.slice(0, 8); // Limit to 8 recommendations
  }

  // === üíé RENDER RESULT ===
  function renderResult(targetId, text) {
    const container = document.getElementById(targetId);
    container.innerHTML = "";

    const score = extractScore(text);
    const recs = extractRecommendations(text);
    if (score !== null) {
      const label = score >= 85 ?
"Excellent ‚úÖ" : score >= 70 ? "Good üëç" : score >= 50 ? "Fair üí°" : "Needs Improvement ‚ö†Ô∏è";
      const color = score >= 85 ? "#00ffc6" : score >= 70 ? "#4ade80" : score >= 50 ?
"#fbbf24" : "#f87171";

      container.innerHTML = `
        <div class="score-section">
          <div class="score-label" style="color: ${color}">${label}</div>
          <div class="progress-container">
            <div class="progress-bar" style="width: ${score}%; background: linear-gradient(90deg, ${color}, #0091ff);"></div>
          </div>
          <div class="score-value">${score}/100</div>
        </div>
      `;
    }

    if (recs && recs.length > 0) {
      const formatted = recs.map(r => `<div class="rec-item">‚úÖ ${r.charAt(0).toUpperCase() + r.slice(1)}</div>`).join("");
      container.innerHTML += `
        <div class="recommendations-section">
          <h4 class="rec-title">üí° Key Recommendations</h4>
          <div class="rec-list">${formatted}</div>
        </div>
      `;
    }

    container.innerHTML += `
      <div class="result-text">
        <details>
          <summary>üìã Full AI Analysis</summary>
          <pre>${text}</pre>
        </details>
      </div>
    `;
  }

  // === ‚ö†Ô∏è SHOW ERROR WITH RETRY ===
  function showError(targetId, message, retryCallback) {
    const container = document.getElementById(targetId);
    container.innerHTML = `
      <div class="error-box">
        <p>‚ö†Ô∏è ${message}</p>
        ${retryCallback ?
'<button class="retry-btn">üîÑ Retry</button>' : ''}
      </div>
    `;
    if (retryCallback) {
      container.querySelector(".retry-btn").addEventListener("click", retryCallback);
    }
  }

  // === üßæ HANDLE RESUME ANALYSIS ===
  async function handleResume(e) {
    e.preventDefault();
    const status = document.getElementById("resume-status");
    const result = document.getElementById("resume-result");
    const file = document.getElementById("resume-upload").files[0];
    const jobDesc = document.getElementById("job-description").value;
    try {
      if (!file) throw new Error("Please upload a resume file.");
      if (file.size > 5000000) { // 5MB limit
        throw new Error("File is too large. Please upload a file smaller than 5MB.");
      }
      status.textContent = "‚è≥ Uploading & analyzing resume...";
      status.style.color = "#00ffc6";
      showLoading("resume-result");

      const text = await file.text();
      if (text.length < 50) {
        throw new Error("Resume file seems too short. Please check the file.");
      }

      // ‚úÖ **THE FIX: Truncate the text before sending it**
      const MAX_CHARS = 15000; // A safe limit for free Netlify functions (approx 15-20kb)
      let truncatedText = text;
      if (text.length > MAX_CHARS) {
        truncatedText = text.slice(0, MAX_CHARS);
        console.warn(`Resume text truncated to ${MAX_CHARS} characters.`);
        status.textContent = "‚è≥ Resume is large, analyzing the first part...";
      }

      const res = await fetch("/.netlify/functions/analyze-resume", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ resumeText: truncatedText, jobDescription: jobDesc }), // Send the truncated text
      });
      const data = await res.json();
      
      if (!res.ok) {
        throw new Error(data.error || `Server error: ${res.status}`);
      }
      
      if (!data.result) {
        throw new Error("No analysis result received");
      }

      let finalResult = data.result;
      if (text.length > MAX_CHARS) {
        finalResult = "‚ö†Ô∏è **Note: Your resume was too long for a quick analysis, so only the first part was reviewed.**\n\n" + finalResult;
      }

      renderResult("resume-result", finalResult);
      status.textContent = "‚úÖ Analysis complete!";
      status.style.color = "#4ade80";
    } catch (err) {
      console.error("Resume analysis failed:", err);
      status.textContent = "‚ùå Analysis failed";
      status.style.color = "#f87171";
      showError("resume-result", err.message, () => handleResume(e));
    }
  }

  // === üîó HANDLE LINKEDIN ANALYSIS ===
  async function handleLinkedIn(e) {
    e.preventDefault();
    const status = document.getElementById("linkedin-status");
    const result = document.getElementById("linkedin-result");
    const profileText = document.getElementById("linkedin-text").value;
    try {
      if (!profileText || profileText.trim().length < 50) {
        throw new Error("Please paste your LinkedIn profile text (minimum 50 characters).");
      }

      status.textContent = "‚è≥ Analyzing LinkedIn profile...";
      status.style.color = "#00ffc6";
      showLoading("linkedin-result");
      const res = await fetch("/.netlify/functions/analyze-linkedin", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ profileText: profileText }),
      });
      const data = await res.json();
      
      if (!res.ok) {
        throw new Error(data.error || `Server error: ${res.status}`);
      }
      
      if (!data.result) {
        throw new Error("No analysis result received");
      }

      renderResult("linkedin-result", data.result);
      status.textContent = "‚úÖ Analysis complete!";
      status.style.color = "#4ade80";
    } catch (err) {
      console.error("LinkedIn analysis failed:", err);
      status.textContent = "‚ùå Analysis failed";
      status.style.color = "#f87171";
      showError("linkedin-result", err.message, () => handleLinkedIn(e));
    }
  }

  // === EVENT LISTENERS ===
  document.addEventListener("astro:page-load", attachListeners);
  document.addEventListener("DOMContentLoaded", attachListeners);

  function attachListeners() {
    const resumeForm = document.getElementById("resume-form");
    const linkedinForm = document.getElementById("linkedin-form");
    if (resumeForm && !resumeForm.dataset.bound) {
      resumeForm.dataset.bound = "true";
      resumeForm.addEventListener("submit", handleResume);
    }
    if (linkedinForm && !linkedinForm.dataset.bound) {
      linkedinForm.dataset.bound = "true";
      linkedinForm.addEventListener("submit", handleLinkedIn);
    }
  }
</script>

<style>
.helper-text {
  font-size: 0.85rem;
  color: #888;
  margin-top: 0.5rem;
  font-style: italic;
}

.status-msg { 
  color: #aaa;
  margin-top: 0.5rem; 
  font-size: 0.9rem; 
  font-weight: 500;
  transition: color 0.3s ease;
}

.error-box { 
  margin-top: 1rem; 
  padding: 1rem; 
  border-radius: 0.75rem;
  background: rgba(255, 0, 0, 0.08); 
  border: 1px solid rgba(255, 0, 0, 0.2); 
  color: #ff6b6b; 
}

.retry-btn {
  margin-top: 0.5rem;
  background: linear-gradient(90deg, #00ffc6, #0091ff);
  color: black;
  font-weight: 600;
  border-radius: 0.5rem;
  padding: 0.4rem 1rem;
  cursor: pointer;
  transition: 0.25s;
  border: none;
}

.retry-btn:hover { 
  opacity: 0.85; 
  transform: scale(1.02); 
}

.rec-item {
  margin: 0.5rem 0;
  padding: 0.5rem;
  background: rgba(0, 255, 198, 0.05);
  border-radius: 0.5rem;
  border-left: 3px solid #00ffc6;
}

.loading-spinner {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 2rem;
}

.spinner-circle {
  width: 50px;
  height: 50px;
  border: 4px solid rgba(0, 255, 198, 0.1);
  border-top-color: #00ffc6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.loading-text {
  margin-top: 1rem;
  color: #00ffc6;
  font-weight: 500;
}

.dots::after {
  content: '';
  animation: dots 1.5s steps(4, end) infinite;
}

@keyframes dots {
  0%, 20% { content: ''; }
  40% { content: '.';
}
  60% { content: '..'; }
  80%, 100% { content: '...'; }
}
</style>