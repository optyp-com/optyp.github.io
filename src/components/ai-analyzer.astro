---
import "../styles/ai-analyzer.css";
---

<section class="ai-container">
  <h2 class="title">Optimize Smarter with AI</h2>
  <p class="subtitle">
    Instantly get your <strong>ATS Resume Score</strong> and <strong>LinkedIn Profile Rating</strong> powered by Google Gemini ‚Äî free, fast, and accurate.
  </p>

  <div class="ai-grid">
    <!-- Resume Analyzer -->
    <div class="glass-card hover-card">
      <h3 class="card-title">ATS Resume Score</h3>
      <form id="resume-form" class="form">
        <input
          type="file"
          id="resume-upload"
          accept=".pdf,.doc,.docx,.txt"
          class="input-file"
        />
        <textarea
          id="job-description"
          placeholder="Paste Job Description (optional)"
          class="input-area"
        ></textarea>
        <button type="submit" class="btn-primary">Analyze Resume</button>
      </form>

      <div id="resume-status" class="status-msg"></div>
      <div id="resume-result" class="result-box"></div>
    </div>

    <!-- LinkedIn Analyzer -->
    <div class="glass-card hover-card">
      <h3 class="card-title">LinkedIn Profile Score</h3>
      <form id="linkedin-form" class="form">
        <input
          type="url"
          id="linkedin-url"
          placeholder="Paste LinkedIn Profile URL"
          class="input-text"
        />
        <button type="submit" class="btn-secondary">Analyze Profile</button>
      </form>

      <div id="linkedin-status" class="status-msg"></div>
      <div id="linkedin-result" class="result-box"></div>
    </div>
  </div>
</section>

<script>
  // === üåÄ LOADING SPINNER ===
  function showLoading(targetId) {
    const container = document.getElementById(targetId);
    container.innerHTML = `
      <div class="loading-spinner">
        <div class="spinner-circle"></div>
        <div class="loading-text">Analyzing with AI<span class="dots"></span></div>
      </div>
    `;
  }

  // === üß† EXTRACT SCORE ===
  function extractScore(text) {
    const match = text.match(/(\d{1,3})\s*\/\s*100|score[:\s]*(\d{1,3})/i);
    const score = match ? parseInt(match[1] || match[2]) : null;
    return Math.min(Math.max(score || 0, 0), 100);
  }

  // === ‚ú® EXTRACT RECOMMENDATIONS ===
  function extractRecommendations(text) {
    const sectionRegex = /(recommendations|suggestions|tips|improvements)[:\s]*([\s\S]*)/i;
    const match = text.match(sectionRegex);
    if (!match) return null;

    const recommendationsText = match[2]
      .split(/\n|\r|\d+\.|[-*‚Ä¢]/)
      .map(line => line.trim())
      .filter(line => line.length > 3);

    return recommendationsText;
  }

  // === üíé RENDER RESULT ===
  function renderResult(targetId, text) {
    const container = document.getElementById(targetId);
    container.innerHTML = "";

    const score = extractScore(text);
    const recs = extractRecommendations(text);

    if (score) {
      const label =
        score >= 85 ? "Excellent ‚úÖ" : score >= 60 ? "Good üëç" : "Needs Improvement ‚ö†Ô∏è";

      container.innerHTML = `
        <div class="score-section">
          <div class="score-label">${label}</div>
          <div class="progress-container">
            <div class="progress-bar" style="width: ${score}%;"></div>
          </div>
          <div class="score-value">${score}/100</div>
        </div>
      `;
    }

    if (recs && recs.length > 0) {
      const formatted = recs.map(r => `‚úÖ ${r.charAt(0).toUpperCase() + r.slice(1)}`).join("<br>");
      container.innerHTML += `
        <div class="recommendations-section">
          <h4 class="rec-title">Recommendations</h4>
          <div class="rec-list">${formatted}</div>
        </div>
      `;
    }

    container.innerHTML += `
      <div class="result-text">
        <details>
          <summary>üìÑ Full AI Analysis</summary>
          <pre>${text}</pre>
        </details>
      </div>
    `;
  }

  // === ‚ö†Ô∏è SHOW ERROR WITH RETRY ===
  function showError(targetId, message, retryCallback) {
    const container = document.getElementById(targetId);
    container.innerHTML = `
      <div class="error-box">
        <p>‚ö†Ô∏è ${message}</p>
        <button class="retry-btn">Retry</button>
      </div>
    `;
    container.querySelector(".retry-btn").addEventListener("click", retryCallback);
  }

  // === üßæ HANDLE RESUME ANALYSIS ===
  async function handleResume(e) {
    e.preventDefault();
    const status = document.getElementById("resume-status");
    const result = document.getElementById("resume-result");
    const file = document.getElementById("resume-upload").files[0];
    const jobDesc = document.getElementById("job-description").value;

    try {
      if (!file) throw new Error("Please upload a resume file.");

      status.textContent = "‚è≥ Uploading & analyzing resume...";
      showLoading("resume-result");

      const text = await file.text();
      const res = await fetch("/.netlify/functions/analyze-resume", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ resumeText: text, jobDescription: jobDesc }),
      });

      const data = await res.json();
      if (!res.ok || !data.result) throw new Error(data.error || "Internal Server Error");
      renderResult("resume-result", data.result);
      status.textContent = "‚úÖ Analysis complete!";
    } catch (err) {
      console.error("Resume analysis failed:", err);
      status.textContent = "‚ö†Ô∏è Something went wrong.";
      showError("resume-result", err.message, () => handleResume(e));
    }
  }

  // === üîó HANDLE LINKEDIN ANALYSIS ===
  async function handleLinkedIn(e) {
    e.preventDefault();
    const status = document.getElementById("linkedin-status");
    const result = document.getElementById("linkedin-result");
    const url = document.getElementById("linkedin-url").value;

    try {
      if (!url) throw new Error("Please enter your LinkedIn URL.");

      status.textContent = "‚è≥ Checking LinkedIn profile...";
      showLoading("linkedin-result");

      const res = await fetch("/.netlify/functions/analyze-linkedin", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ profileUrl: url }),
      });

      const data = await res.json();
      if (!res.ok || !data.result) throw new Error(data.error || "Internal Server Error");
      renderResult("linkedin-result", data.result);
      status.textContent = "‚úÖ Analysis complete!";
    } catch (err) {
      console.error("LinkedIn analysis failed:", err);
      status.textContent = "‚ö†Ô∏è Something went wrong.";
      showError("linkedin-result", err.message, () => handleLinkedIn(e));
    }
  }

  // === EVENT LISTENERS ===
  document.addEventListener("astro:page-load", attachListeners);
  document.addEventListener("DOMContentLoaded", attachListeners);

  function attachListeners() {
    const resumeForm = document.getElementById("resume-form");
    const linkedinForm = document.getElementById("linkedin-form");

    if (resumeForm && !resumeForm.dataset.bound) {
      resumeForm.dataset.bound = "true";
      resumeForm.addEventListener("submit", handleResume);
    }
    if (linkedinForm && !linkedinForm.dataset.bound) {
      linkedinForm.dataset.bound = "true";
      linkedinForm.addEventListener("submit", handleLinkedIn);
    }
  }
</script>

<style>
.status-msg { color: #aaa; margin-top: 0.5rem; font-size: 0.9rem; }
.error-box { margin-top: 1rem; padding: 1rem; border-radius: 0.75rem; background: rgba(255, 0, 0, 0.08); border: 1px solid rgba(255, 0, 0, 0.2); color: #ff6b6b; }
.retry-btn {
  margin-top: 0.5rem;
  background: linear-gradient(90deg, #00ffc6, #0091ff);
  color: black;
  font-weight: 600;
  border-radius: 0.5rem;
  padding: 0.4rem 1rem;
  cursor: pointer;
  transition: 0.25s;
}
.retry-btn:hover { opacity: 0.85; transform: scale(1.02); }
</style>
