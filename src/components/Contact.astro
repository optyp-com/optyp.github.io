---
const siteUrl = "https://optyp.com"; // ⚠️ update if your live domain changes
---

<section class="py-20 bg-primary-50 text-center">
  <div id="contact">
    <h2 class="text-4xl font-extrabold mb-6 text-primary-700">Contact Us</h2>
    <p class="max-w-xl mx-auto mb-12 text-black text-lg font-medium">
      Have questions or want to get started? Click below to open the form.
    </p>

    <!-- Trigger Button -->
    <div class="flex flex-col items-center space-y-2 w-full max-w-xs mx-auto sm:max-w-none">
      <button
        id="contact-icon-btn"
        class="w-full sm:w-auto inline-flex items-center justify-center gap-2 px-8 py-3 bg-primary-600 text-white font-semibold rounded-lg shadow-lg hover:bg-primary-700 transition"
        aria-label="Open Contact Form"
        onclick="openContactForm()"
      >
        <!-- Envelope Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8m-18 8h18a2 2 0 002-2V6a2 2 0 00-2-2H3a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg>
        Get Started
      </button>
    </div>
  </div>
</section>

<!-- Modal -->
<div id="contact-modal"
     class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 hidden opacity-0 transition-opacity duration-300"
     aria-modal="true" role="dialog"
     onclick="closeContactForm()">

  <div class="relative bg-white shadow-lg
              w-full h-full sm:w-[95%] sm:h-[90%] md:w-[70%] md:h-[85%]
              flex flex-col transform transition-transform duration-300
              sm:rounded-lg md:rounded-lg
              translate-y-full sm:translate-y-0 scale-95"
       id="contact-modal-content"
       onclick="event.stopPropagation()">

    <!-- Header -->
    <div class="sticky top-0 z-10 flex justify-end p-3 bg-white border-b sm:rounded-t-lg">
      <button id="close-contact-btn"
        onclick="closeContactForm()"
        class="w-10 h-10 sm:w-8 sm:h-8 flex items-center justify-center bg-gray-600 hover:bg-gray-700 text-white rounded-full shadow-md"
        aria-label="Close Form">✕
      </button>
    </div>

    <!-- Contact Form -->
    <div class="flex-1 overflow-y-auto p-6 sm:p-10">
      <form id="contact-form" class="space-y-6 max-w-2xl mx-auto" novalidate>
        
        <!-- Web3Forms Access Key -->
        <input type="hidden" name="access_key" value="adb0d3eb-198d-40ab-bfeb-d6d36ed4e402">
        
        <!-- Custom Subject -->
        <input type="hidden" name="subject" value="New Contact Form Submission - OPTYP">
        
        <!-- From Name -->
        <input type="hidden" name="from_name" value="OPTYP Contact Form">
        
        <!-- Anti-spam -->
        <input type="checkbox" name="botcheck" style="display: none;">

        <!-- Name + Email -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name *</label>
            <input type="text" name="name" id="name" required
              class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3">
            <div class="field-error text-red-500 text-sm mt-1 hidden" aria-live="polite"></div>
          </div>
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email *</label>
            <input type="email" name="email" id="email" required
              class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3">
            <div class="field-error text-red-500 text-sm mt-1 hidden" aria-live="polite"></div>
          </div>
        </div>

        <!-- Contact Number -->
        <div>
          <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Contact Number *</label>
          <input type="tel" name="phone" id="phone" required
            class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3"
            placeholder="e.g. +91 9876543210">
          <div class="field-error text-red-500 text-sm mt-1 hidden" aria-live="polite"></div>
        </div>

        <!-- Profession -->
        <div>
          <label for="profession" class="block text-sm font-medium text-gray-700 mb-1">What do you currently do? *</label>
          <select name="profession" id="profession" required
            class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3">
            <option value="">Select an option</option>
            <option value="salaried">Salaried Professional</option>
            <option value="self-employed">Self-Employed</option>
            <option value="student">Student</option>
          </select>
          <div class="field-error text-red-500 text-sm mt-1 hidden" aria-live="polite"></div>
        </div>

        <!-- Experience (only for salaried) -->
        <div id="experience-wrapper" class="hidden">
          <label for="experience" class="block text-sm font-medium text-gray-700 mb-1">Years of Experience *</label>
          <select name="experience" id="experience"
            class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3">
            <option value="">Select experience</option>
            <option value="0">0 years (Fresher)</option>
            <option value="1-2">1-2 years</option>
            <option value="3-5">3-5 years</option>
            <option value="5-10">5-10 years</option>
            <option value="10-15">10-15 years</option>
            <option value="15+">15+ years</option>
          </select>
          <div class="field-error text-red-500 text-sm mt-1 hidden" aria-live="polite"></div>
        </div>

        <!-- Services -->
        <div>
          <label for="services" class="block text-sm font-medium text-gray-700 mb-1">Select Services *</label>
          <select name="services" id="services" multiple required
            class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3">
            <option value="ATS Resume">ATS Resume</option>
            <option value="LinkedIn Optimization">LinkedIn Optimization</option>
            <option value="Naukri">Naukri</option>
            <option value="Indeed">Indeed</option>
            <option value="GitHub">GitHub</option>
            <option value="Portfolio Website">Portfolio Website</option>
            <option value="Upwork">Upwork</option>
            <option value="Fiverr">Fiverr</option>
            <option value="Personal Branding Full Plan">Personal Branding Full Plan</option>
          </select>
          <p class="text-sm text-gray-500 mt-1">Hold CTRL (Windows) or CMD (Mac) to select multiple.</p>
          <div class="field-error text-red-500 text-sm mt-1 hidden" aria-live="polite"></div>
        </div>

        <!-- Message -->
        <div>
          <label for="message" class="block text-sm font-medium text-gray-700 mb-1">Message *</label>
          <textarea name="message" id="message" rows="5" required
            class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3"></textarea>
          <div class="field-error text-red-500 text-sm mt-1 hidden" aria-live="polite"></div>
        </div>

        <!-- Submit -->
        <div class="text-center">
          <button id="submit-btn" type="submit"
            class="w-full sm:w-auto inline-flex items-center justify-center gap-2 px-8 py-3 bg-primary-600 text-white font-semibold rounded-lg shadow-lg hover:bg-primary-700 transition"
          >
            <!-- Envelope Icon -->
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8m-18 8h18a2 2 0 002-2V6a2 2 0 00-2-2H3a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            <span id="btn-text">Send Message</span>
            <svg id="btn-spinner" class="animate-spin h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
            </svg>
          </button>
        </div>

        <!-- Post-submit action area (hidden initially) -->
        <div id="post-actions" class="mt-4 hidden text-center">
          <p class="text-sm text-gray-600 mb-3">Thanks — your message was received. What would you like to do next?</p>
          <div class="flex flex-col sm:flex-row gap-3 justify-center">
            <button onclick="closeContactForm()" class="inline-flex items-center justify-center px-5 py-3 bg-gray-100 text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50">
              Close
            </button>
            <a href="/#plans" class="inline-flex items-center justify-center px-5 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700">
              View Our Plans
            </a>
          </div>
        </div>

      </form>
    </div>
  </div>
</div>

<!-- Toast -->
<div id="toast" class="fixed bottom-5 right-5 hidden z-[9999] w-[90%] max-w-sm">
  <div id="toast-content"
       class="flex items-center gap-3 px-6 py-4 rounded-lg shadow-lg font-medium transition transform translate-y-5 opacity-0"
       role="status" aria-live="polite">
    <span id="toast-icon" class="flex items-center justify-center w-6 h-6 rounded-full"></span>
    <span id="toast-message" class="text-sm"></span>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function () {
    // Elements
    const form = document.getElementById("contact-form");
    const submitBtn = document.getElementById("submit-btn");
    const btnText = document.getElementById("btn-text");
    const btnSpinner = document.getElementById("btn-spinner");

    const toast = document.getElementById("toast");
    const toastContent = document.getElementById("toast-content");
    const toastMessage = document.getElementById("toast-message");
    const toastIcon = document.getElementById("toast-icon");

    const profession = document.getElementById("profession");
    const experienceWrapper = document.getElementById("experience-wrapper");
    const experienceField = document.getElementById("experience");
    const servicesSelect = document.getElementById("services");
    const postActions = document.getElementById("post-actions");

    // Utility: show field-level error
    function showFieldError(field, message) {
      if (!field) return;
      // For selects/inputs within a wrapper
      const parent = field.closest('div');
      const errorDiv = parent ? parent.querySelector('.field-error') : null;
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      }
      field.classList.add('border-red-500');
    }

    function clearFieldError(field) {
      if (!field) return;
      const parent = field.closest('div');
      const errorDiv = parent ? parent.querySelector('.field-error') : null;
      if (errorDiv) {
        errorDiv.textContent = '';
        errorDiv.classList.add('hidden');
      }
      field.classList.remove('border-red-500');
    }

    function clearAllErrors() {
      const fields = form.querySelectorAll('input, select, textarea');
      fields.forEach(f => clearFieldError(f));
    }

    // Toast
    function showToast(message, type = "success") {
      const colors = {
        success: "bg-green-600 text-white",
        error: "bg-red-600 text-white",
        warning: "bg-yellow-600 text-white"
      };
      const icons = {
        success: "✅",
        error: "❌",
        warning: "⚠️"
      };

      toastMessage.textContent = message;
      toastContent.className = `flex items-center gap-3 px-6 py-4 rounded-lg shadow-lg font-medium transition transform ${colors[type]}`;
      toastIcon.textContent = icons[type];

      toast.classList.remove("hidden");
      requestAnimationFrame(() => {
        toastContent.classList.remove("opacity-0", "translate-y-5");
        toastContent.classList.add("opacity-100", "translate-y-0");
      });

      setTimeout(() => {
        toastContent.classList.remove("opacity-100", "translate-y-0");
        toastContent.classList.add("opacity-0", "translate-y-5");
        setTimeout(() => {
          toast.classList.add("hidden");
        }, 300);
      }, 3000);
    }

    // Toggle experience field when profession changes
    profession.addEventListener('change', () => {
      if (profession.value === 'salaried') {
        experienceWrapper.classList.remove('hidden');
        experienceField.setAttribute('required', 'true');
      } else {
        experienceWrapper.classList.add('hidden');
        experienceField.removeAttribute('required');
        experienceField.value = '';
        clearFieldError(experienceField);
      }
      clearFieldError(profession);
    });

    // Basic validation
    function validateForm() {
      let valid = true;
      clearAllErrors();

      const name = form.querySelector('[name="name"]');
      const email = form.querySelector('[name="email"]');
      const phone = form.querySelector('[name="phone"]');
      const professionField = form.querySelector('[name="profession"]');
      const message = form.querySelector('[name="message"]');

      if (!name.value.trim()) {
        showFieldError(name, 'Full name is required');
        valid = false;
      }

      if (!email.value.trim()) {
        showFieldError(email, 'Email is required');
        valid = false;
      } else {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email.value.trim())) {
          showFieldError(email, 'Please enter a valid email');
          valid = false;
        }
      }

      if (!phone.value.trim()) {
        showFieldError(phone, 'Contact number is required');
        valid = false;
      } else {
        const phoneRegex = /^[\+]?[\d\s\-\(\)]{10,15}$/;
        if (!phoneRegex.test(phone.value.trim())) {
          showFieldError(phone, 'Please enter a valid phone number');
          valid = false;
        }
      }

      if (!professionField.value) {
        showFieldError(professionField, 'Please select your profession');
        valid = false;
      }

      // Experience required only if salaried
      if (professionField.value === 'salaried') {
        if (!experienceField.value) {
          showFieldError(experienceField, 'Please select your experience level');
          valid = false;
        }
      }

      // Services (multiple select) — ensure at least one selected
      const selectedServices = Array.from(servicesSelect.selectedOptions).map(o => o.value).filter(Boolean);
      if (selectedServices.length === 0) {
        showFieldError(servicesSelect, 'Please select at least one service');
        valid = false;
      }

      if (!message.value.trim()) {
        showFieldError(message, 'Message is required');
        valid = false;
      }

      return valid;
    }

    // Loading state helper
    function setLoadingState(isLoading) {
      if (isLoading) {
        btnText.textContent = "Sending...";
        btnSpinner.classList.remove("hidden");
        submitBtn.disabled = true;
        form.classList.add('pointer-events-none', 'opacity-75');
      } else {
        btnText.textContent = "Send Message";
        btnSpinner.classList.add("hidden");
        submitBtn.disabled = false;
        form.classList.remove('pointer-events-none', 'opacity-75');
      }
    }

    // optional: real-time clear on input
    form.querySelectorAll('input, textarea, select').forEach(el => {
      el.addEventListener('input', () => clearFieldError(el));
      el.addEventListener('blur', () => {
        if (el.hasAttribute('required') && el.value.trim()) clearFieldError(el);
      });
    });

    // Submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Run validation
      if (!validateForm()) {
        showToast("Please fix the errors highlighted below.", "error");
        return;
      }

      setLoadingState(true);
      postActions.classList.add('hidden'); // hide post-actions until success

      try {
        const formData = new FormData(form);

        // Convert multiple select
        const services = formData.getAll('services');
        formData.delete('services');
        formData.append('services', services.join(', '));

        // Optional: include experience even if empty (ok)
        const object = Object.fromEntries(formData);
        const json = JSON.stringify(object);

        const response = await fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
          body: json
        });

        const result = await response.json();

        if (response.ok && (result.success === true || response.status === 200)) {
          showToast("Message sent successfully! Redirecting…", "success");

          // show action buttons if redirect doesn't happen
          postActions.classList.remove('hidden');

          form.reset();
          experienceWrapper.classList.add('hidden');
          // clear errors if any
          clearAllErrors();

          // Brief delay, then redirect to thank-you if siteUrl configured
          setTimeout(() => {
            if (typeof siteUrl !== 'undefined' && siteUrl) {
              // ensure trailing slash
              const url = siteUrl.replace(/\/+$/, '') + '/thank-you/';
              window.location.href = url;
            }
          }, 2000);
        } else {
          const msg = (result && result.message) ? result.message : 'Failed to send message. Please try again later.';
          showToast(msg, "error");
        }
      } catch (err) {
        console.error('Submission error', err);
        showToast("Network error. Please check your connection and try again.", "error");
      } finally {
        setLoadingState(false);
      }
    });

    // expose modal functions globally (needed because onclick attributes call them)
    window.openContactForm = function () {
      const modal = document.getElementById('contact-modal');
      const content = document.getElementById('contact-modal-content');
      lastFocusedElement = document.activeElement;
      document.body.classList.add('overflow-hidden');
      modal.classList.remove('hidden');
      requestAnimationFrame(() => {
        modal.classList.add('opacity-100');
        modal.classList.remove('opacity-0');
        content.classList.add('scale-100');
        content.classList.remove('scale-95');
        content.classList.remove('translate-y-full');
      });
      document.getElementById('close-contact-btn').focus();
    };

    window.closeContactForm = function () {
      const modal = document.getElementById('contact-modal');
      const content = document.getElementById('contact-modal-content');
      document.body.classList.remove('overflow-hidden');
      modal.classList.remove('opacity-100');
      modal.classList.add('opacity-0');
      content.classList.remove('scale-100');
      content.classList.add('scale-95');
      content.classList.add('translate-y-full');
      setTimeout(() => {
        modal.classList.add('hidden');
        if (lastFocusedElement) lastFocusedElement.focus();
      }, 300);
    };

    // close on Escape
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !document.getElementById('contact-modal').classList.contains('hidden')) {
        window.closeContactForm();
      }
    });
  }); // DOMContentLoaded
</script>
