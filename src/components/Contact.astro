---
const siteUrl = "https://optyp-com.github.io/optyp.github.io"; // ⚠️ update if repo name changes
---

<section class="bg-gray-50 py-20">
  <div class="container mx-auto max-w-5xl px-4 text-center">
    <!-- Section Heading -->
    <h2 class="text-4xl font-extrabold mb-4 text-gray-900 tracking-wide-heading">
      Contact Us
    </h2>
    <div class="w-20 h-1 bg-gradient-to-r from-primary-500 to-primary-700 mx-auto mb-10 rounded-full"></div>

    <p class="text-gray-800 mb-12 max-w-xl mx-auto">
      Have questions or want to get started? Click below to open the form.
    </p>

    <!-- Trigger Button -->
    <div class="flex flex-col items-center space-y-2">
      <button
        id="contact-icon-btn"
        class="inline-block bg-primary-600 text-white px-6 py-3 rounded-lg hover:bg-primary-700 transition-colors hover:shadow-lg hover:scale-105 transition duration-300"
        aria-label="Open Contact Form"
        onclick="openContactForm()"
      >
        Get Started
      </button>
    </div>
  </div>
</section>

<!-- Modal -->
<div id="contact-modal"
     class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 hidden opacity-0 transition-opacity duration-300"
     aria-modal="true" role="dialog"
     onclick="closeContactForm()">

  <div class="relative bg-white shadow-lg
              w-full h-full sm:w-[95%] sm:h-[90%] md:w-[70%] md:h-[85%]
              flex flex-col transform transition-transform duration-300
              sm:rounded-lg md:rounded-lg
              translate-y-full sm:translate-y-0 scale-95"
       id="contact-modal-content"
       onclick="event.stopPropagation()">

    <!-- Header -->
    <div class="sticky top-0 z-10 flex justify-end p-3 bg-white border-b sm:rounded-t-lg">
      <button id="close-contact-btn"
        onclick="closeContactForm()"
        class="w-10 h-10 sm:w-8 sm:h-8 flex items-center justify-center bg-gray-600 hover:bg-gray-700 text-white rounded-full shadow-md transition duration-300 hover:scale-105"
        aria-label="Close Form">✕
      </button>
    </div>

    <!-- Contact Form -->
    <div class="flex-1 overflow-y-auto p-6 sm:p-10">
      <div class="group bg-white p-6 rounded-lg shadow hover:shadow-lg hover:scale-105 transition duration-300 hover:border-primary-500 border border-transparent transform max-w-2xl mx-auto">
        <form id="contact-form" class="space-y-6" novalidate>
          
          <!-- Web3Forms Access Key -->
          <input type="hidden" name="access_key" value="adb0d3eb-198d-40ab-bfeb-d6d36ed4e402">
          
          <!-- Custom Subject -->
          <input type="hidden" name="subject" value="New Contact Form Submission - OPTYP">
          
          <!-- From Name -->
          <input type="hidden" name="from_name" value="OPTYP Contact Form">
          
          <!-- Anti-spam -->
          <input type="checkbox" name="botcheck" style="display: none;">

          <!-- Name + Email -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="name" class="block text-sm font-bold mb-1 text-gray-900 transition-colors duration-300 group-hover:text-primary-600">Full Name *</label>
              <input type="text" name="name" id="name" required
                class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3 transition duration-300">
              <div class="field-error text-red-500 text-sm mt-1 hidden"></div>
            </div>
            <div>
              <label for="email" class="block text-sm font-bold mb-1 text-gray-900 transition-colors duration-300 group-hover:text-primary-600">Email *</label>
              <input type="email" name="email" id="email" required
                class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3 transition duration-300">
              <div class="field-error text-red-500 text-sm mt-1 hidden"></div>
            </div>
          </div>

          <!-- Contact Number -->
          <div>
            <label for="phone" class="block text-sm font-bold mb-1 text-gray-900 transition-colors duration-300 group-hover:text-primary-600">Contact Number *</label>
            <input type="tel" name="phone" id="phone" required
              class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3 transition duration-300"
              placeholder="e.g. +91 9876543210">
            <div class="field-error text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Profession -->
          <div>
            <label for="profession" class="block text-sm font-bold mb-1 text-gray-900 transition-colors duration-300 group-hover:text-primary-600">What do you currently do? *</label>
            <select name="profession" id="profession" required
              class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3 transition duration-300">
              <option value="">Select an option</option>
              <option value="salaried">Salaried Professional</option>
              <option value="self-employed">Self-Employed</option>
              <option value="student">Student</option>
            </select>
            <div class="field-error text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Experience (only for salaried) -->
          <div id="experience-wrapper" class="hidden">
            <label for="experience" class="block text-sm font-bold mb-1 text-gray-900 transition-colors duration-300 group-hover:text-primary-600">Years of Experience *</label>
            <select name="experience" id="experience"
              class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3 transition duration-300">
              <option value="">Select experience</option>
              <option value="0">0 years (Fresher)</option>
              <option value="1-2">1-2 years</option>
              <option value="3-5">3-5 years</option>
              <option value="5-10">5-10 years</option>
              <option value="10-15">10-15 years</option>
              <option value="15+">15+ years</option>
            </select>
            <div class="field-error text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Services -->
          <div>
            <label for="services" class="block text-sm font-bold mb-1 text-gray-900 transition-colors duration-300 group-hover:text-primary-600">Select Services *</label>
            <select name="services" id="services" multiple required
              class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3 transition duration-300">
              <option value="ATS Resume">ATS Resume</option>
              <option value="LinkedIn Optimization">LinkedIn Optimization</option>
              <option value="Naukri">Naukri</option>
              <option value="Indeed">Indeed</option>
              <option value="GitHub">GitHub</option>
              <option value="Portfolio Website">Portfolio Website</option>
              <option value="Upwork">Upwork</option>
              <option value="Fiverr">Fiverr</option>
              <option value="Personal Branding Full Plan">Personal Branding Full Plan</option>
            </select>
            <p class="text-sm text-gray-500 mt-1">Hold CTRL (Windows) or CMD (Mac) to select multiple.</p>
            <div class="field-error text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Message -->
          <div>
            <label for="message" class="block text-sm font-bold mb-1 text-gray-900 transition-colors duration-300 group-hover:text-primary-600">Message *</label>
            <textarea name="message" id="message" rows="5" required
              class="input-field w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 p-3 transition duration-300"></textarea>
            <div class="field-error text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Submit -->
          <div class="text-center">
            <button id="submit-btn" type="submit"
              class="w-full md:w-auto inline-block bg-primary-600 text-white px-6 py-3 rounded-lg hover:bg-primary-700 transition-colors hover:shadow-lg hover:scale-105 transition duration-300 flex items-center justify-center gap-2">
              <span id="btn-text">Send Message</span>
              <svg id="btn-spinner" class="animate-spin h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
              </svg>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Toast -->
<div id="toast" class="fixed bottom-5 right-5 hidden z-[9999]">
  <div id="toast-content"
       class="flex items-center gap-3 px-6 py-4 rounded-lg shadow-lg text-white font-medium transition transform translate-y-5 opacity-0">
    <span id="toast-icon"></span>
    <span id="toast-message"></span>
  </div>
</div>

<script is:inline>
  // Modal open/close
  let lastFocusedElement = null;

  function openContactForm() {
    const modal = document.getElementById('contact-modal');
    const content = document.getElementById('contact-modal-content');
    lastFocusedElement = document.activeElement;
    document.body.classList.add('overflow-hidden');
    modal.classList.remove('hidden');
    requestAnimationFrame(() => {
      modal.classList.add('opacity-100');
      modal.classList.remove('opacity-0');
      content.classList.add('scale-100');
      content.classList.remove('scale-95');
      content.classList.remove('translate-y-full');
    });
    document.getElementById('close-contact-btn').focus();
  }

  function closeContactForm() {
    const modal = document.getElementById('contact-modal');
    const content = document.getElementById('contact-modal-content');
    document.body.classList.remove('overflow-hidden');
    modal.classList.remove('opacity-100');
    modal.classList.add('opacity-0');
    content.classList.remove('scale-100');
    content.classList.add('scale-95');
    content.classList.add('translate-y-full');
    setTimeout(() => {
      modal.classList.add('hidden');
      if (lastFocusedElement) lastFocusedElement.focus();
    }, 300);
  }

  // Close modal on Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && !document.getElementById('contact-modal').classList.contains('hidden')) {
      closeContactForm();
    }
  });

  // Show/hide experience field based on profession
  document.getElementById("profession").addEventListener("change", function() {
    const expWrapper = document.getElementById("experience-wrapper");
    const expField = document.getElementById("experience");
    
    if (this.value === "salaried") {
      expWrapper.classList.remove("hidden");
      expField.setAttribute('required', 'true');
    } else {
      expWrapper.classList.add("hidden");
      expField.removeAttribute('required');
      expField.value = '';
      clearFieldError(expField);
    }
  });

  // Form handling
  const form = document.getElementById("contact-form");
  const submitBtn = document.getElementById("submit-btn");
  const btnText = document.getElementById("btn-text");
  const btnSpinner = document.getElementById("btn-spinner");

  const toast = document.getElementById("toast");
  const toastContent = document.getElementById("toast-content");
  const toastMessage = document.getElementById("toast-message");
  const toastIcon = document.getElementById("toast-icon");

  // Field validation functions
  function showFieldError(field, message) {
    field.classList.add('border-red-500');
    const errorDiv = field.parentNode.querySelector('.field-error');
    if (errorDiv) {
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
    }
  }

  function clearFieldError(field) {
    field.classList.remove('border-red-500');
    const errorDiv = field.parentNode.querySelector('.field-error');
    if (errorDiv) {
      errorDiv.classList.add('hidden');
    }
  }

  function clearAllErrors() {
    const fields = form.querySelectorAll('input, select, textarea');
    fields.forEach(field => clearFieldError(field));
  }

  function validateForm() {
    let isValid = true;
    clearAllErrors();

    // Required fields validation
    const requiredFields = [
      { name: 'name', message: 'Full name is required' },
      { name: 'email', message: 'Email is required' },
      { name: 'phone', message: 'Contact number is required' },
      { name: 'profession', message: 'Please select your profession' },
      { name: 'services', message: 'Please select at least one service' },
      { name: 'message', message: 'Message is required' }
    ];

    requiredFields.forEach(fieldObj => {
      const field = form.querySelector(`[name="${fieldObj.name}"]`);
      if (!field || !field.value.trim()) {
        showFieldError(field, fieldObj.message);
        isValid = false;
      }
    });

    // Experience validation for salaried professionals
    const profession = form.querySelector('[name="profession"]').value;
    if (profession === 'salaried') {
      const experience = form.querySelector('[name="experience"]');
      if (!experience.value) {
        showFieldError(experience, 'Please select your experience level');
        isValid = false;
      }
    }

    // Email format validation
    const email = form.querySelector('[name="email"]').value;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (email && !emailRegex.test(email)) {
      showFieldError(form.querySelector('[name="email"]'), 'Please enter a valid email address');
      isValid = false;
    }

    // Phone format validation
    const phone = form.querySelector('[name="phone"]').value;
    const phoneRegex = /^[\+]?[\d\s\-\(\)]{10,15}$/;
    if (phone && !phoneRegex.test(phone)) {
      showFieldError(form.querySelector('[name="phone"]'), 'Please enter a valid phone number');
      isValid = false;
    }

    return isValid;
  }

  function setLoadingState(isLoading) {
    if (isLoading) {
      btnText.textContent = "Sending...";
      btnSpinner.classList.remove("hidden");
      submitBtn.disabled = true;
      form.classList.add('pointer-events-none', 'opacity-75');
    } else {
      btnText.textContent = "Send Message";
      btnSpinner.classList.add("hidden");
      submitBtn.disabled = false;
      form.classList.remove('pointer-events-none', 'opacity-75');
    }
  }

  function showToast(message, colorClass, icon) {
    toastMessage.textContent = message;
    toastIcon.textContent = icon;
    toastContent.className = `flex items-center gap-3 px-6 py-4 rounded-lg shadow-lg text-white font-medium transition transform ${colorClass}`;
    toast.classList.remove("hidden");
    
    requestAnimationFrame(() => {
      toastContent.classList.remove("opacity-0", "translate-y-5");
      toastContent.classList.add("opacity-100", "translate-y-0");
    });

    setTimeout(() => {
      toastContent.classList.remove("opacity-100", "translate-y-0");
      toastContent.classList.add("opacity-0", "translate-y-5");
      setTimeout(() => {
        toast.classList.add("hidden");
      }, 300);
    }, 3000);
  }

  // Form submission handler
  form.addEventListener("submit", async function (e) {
    e.preventDefault();

    // Validate form first
    if (!validateForm()) {
      showToast("Please fix the errors below", "bg-red-600", "❌");
      return;
    }

    setLoadingState(true);

    try {
      const formData = new FormData(form);
      
      // Convert services array to string for Web3Forms
      const services = formData.getAll('services');
      formData.delete('services');
      formData.append('services', services.join(', '));
      
      // Convert FormData to JSON object
      const object = Object.fromEntries(formData);
      const json = JSON.stringify(object);

      console.log('Submitting form data:', object);

      const response = await fetch('https://api.web3forms.com/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: json
      });

      const result = await response.json();
      console.log('Response:', response.status, result);

      if (response.status === 200) {
        showToast("Message sent successfully! We'll get back to you soon.", "bg-green-600", "✅");
        form.reset();
        clearAllErrors();
        
        // Hide experience field if it was shown
        document.getElementById("experience-wrapper").classList.add("hidden");
        
        // Optional: Close modal after successful submission
        setTimeout(() => {
          closeContactForm();
          // Redirect to thank you page if it exists
          if (typeof siteUrl !== 'undefined') {
            window.location.href = `${siteUrl}/thank-you/`;
          }
        }, 2000);
        
      } else {
        let errorMessage = "Failed to send message. Please try again.";
        
        if (result.message) {
          errorMessage = result.message;
        } else if (response.status === 429) {
          errorMessage = "Too many requests. Please wait a moment and try again.";
        } else if (response.status === 400) {
          errorMessage = "Invalid form data. Please check your inputs.";
        }
        
        console.error('Form submission error:', result);
        showToast(errorMessage, "bg-red-600", "❌");
      }
      
    } catch (error) {
      console.error('Network error:', error);
      
      let errorMessage = "Network error. Please check your connection and try again.";
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        errorMessage = "Unable to connect. Please check your internet connection.";
      }
      
      showToast(errorMessage, "bg-red-600", "❌");
      
    } finally {
      setLoadingState(false);
    }
  });

  // Real-time validation (optional)
  const inputs = form.querySelectorAll('input, select, textarea');
  inputs.forEach(input => {
    input.addEventListener('blur', function() {
      if (this.hasAttribute('required') && this.value.trim()) {
        clearFieldError(this);
      }
    });
  });

  console.log('✅ Contact form initialized successfully');
</script>
